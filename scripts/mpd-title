#!/usr/bin/env perl
# Constructs a title for the song currently playing on MPD.
# Needs MPD.pm and MP3::Info.

use strict;
use warnings;
use IO::Socket;
use Getopt::Long;
use Text::Wrap;
use MPD::MPD;
use MP3::Info;

sub max_length {
    my $max = 0;
    foreach ($@) {
	next unless defined $_;
	my $len = (length $_);
	$max = $len if $len > $max;
    }
    return $max;
}

sub field_valid {
    $_ = shift;
    return ($_ && m/[[:alnum:]]/);
}

my $cols = 80;
my $flush = 0;
my ($mhost, $mport);
my $fldsep = ' - ';
my $dumpfile;
my $dbroot = ($ENV{MPD_DB_ROOT} || '/');

Getopt::Long::Configure ('gnu_getopt');

GetOptions ('columns|c=i'	=> \$cols,
	    'flush|f=i'		=> \$flush,
	    'mpd-host|h=s'	=> \$mhost,
	    'mpd-port|p=i'	=> \$mport,
	    'separator|s=s'	=> \$fldsep,
	    'dump|d=s'		=> \$dumpfile,
	    'db-root|r=s'	=> \$dbroot,
	   ) or die 'Unable to parse command line';

$Text::Wrap::columns = $cols;

my $mpd = MPD->new ($mhost, $mport);
my %data = $mpd->get_current_song_info();

my $tinf;

if (defined $data{file}) {
    my $mdat = get_mp3info($dbroot.'/'.$data{file});
    $tinf = "";
    $tinf .= $mdat->{TIME}.' @ ' if defined $mdat->{TIME};
    $tinf .= $mdat->{BITRATE}.' KBps' if defined $mdat->{BITRATE};
    $tinf .= ' (VBR '.$mdat->{VBR_SCALE}.')' if defined $mdat->{VBR_SCALE};
}

$Text::Wrap::break = $fldsep
  if (max_length $data{Title}, $tinf, $data{file}, $data{Artist},
      $data{Album}, $data{Track}, $data{Composer}) < $cols;

my $title = ((field_valid $data{Title}) ? $data{Title} : $data{file});
$title .= $fldsep.$tinf if (field_valid $tinf);
$title .= $fldsep.$data{Artist} if (field_valid $data{Artist});
$title .= $fldsep.$data{Album} if (field_valid $data{Album});
$title .= $fldsep."Track $data{Track}" if (field_valid $data{Track});
$title .= $fldsep.$data{Composer} if (field_valid $data{Composer});

if (defined $dumpfile) {
    if (open TFILE, "> $dumpfile") {
	print TFILE $title if defined $title;
	close TFILE;
    } else {
	print STDERR "Unable to open file $dumpfile: $!\n";
    }
}

$title = wrap("", "", $title);
my @lines = (split /\n/, $title);
$title = "";
foreach (@lines) {
    s/^\s*(.*)/$1/;
    $title .= "$_\n";
}

$title = ("\n" x $flush).$title."\n";

print $title;
